install.packages("shiny")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Load the `shiny` package (install it in the R terminal if you haven't already)
library(shiny)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()`
# layout, which should be passed the following:
ui <- fluidPage(
# A top level header: "First Shiny Website"
h1("First Shiny website"),
# A Paragraph, describing your excitement: include some `strong` text
p("Wow, this is so exciting!", strong("This is some cool formatted text")),
# An image with this `src`
# https://media2.giphy.com/media/l3q2Ip7FrmPE33EiI/giphy.gif
img("", src = "https://media2.giphy.com/media/l3q2Ip7FrmPE33EiI/giphy.gif"
),
# Another paragraph about a slider: include some `em` text
p("This is a paragraph that will detail information about a slider,", em("it has italicized text.")),
# A slider with an appropriate label, min of 10, max of 100, value of 50
sliderInput(
"slider",
"", 10, 100, 50, 10
)
)
# Define a `server` function that accepts an input and an output
# At this point, don't do anything in the function
# This function should perform the following:
server <- function(input, output) {
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
# Install and load the `shiny` package
library(shiny)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput(label = "Price (in dollars)", value = 0, min = 0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput(label = "Quantity", value = 1, min = 1),
# The word "Cost", strongly bolded
h1(strong(Cost)),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput()
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput("price", label = "Price (in dollars)", value = 0, min = 0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput("quantity", label = "Quantity", value = 1, min = 1),
# The word "Cost", strongly bolded
h1(strong("Cost")),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost")
)
# Install and load the `shiny` package
library(shiny)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput("price", label = "Price (in dollars)", value = 0, min = 0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput("quantity", label = "Quantity", value = 1, min = 1),
# The word "Cost", strongly bolded
h1(strong("Cost")),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost")
)
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
server <- function(input, output) {
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
output$cost <- renderText({
return(paste0("$", input$price * input$quantity))
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
runApp('C:/Users/PC-2/Desktop/info 201 participation/ch16-shiny/exercise-2')
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput("price", label = "Price (in dollars)", value = 0, min = 0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput("quantity", label = "Quantity", value = 1, min = 1),
# The word "Cost", strongly bolded
h1(strong("Cost")),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost")
)
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
server <- function(input, output) {
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
output$cost <- renderText({
return(paste0("$", input$price * input$quantity))
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
runApp('C:/Users/PC-2/Desktop/info 201 participation/ch16-shiny/exercise-2')
runApp('C:/Users/PC-2/Desktop/info 201 participation/ch16-shiny/exercise-2')
runApp('C:/Users/PC-2/Desktop/info 201 participation/ch16-shiny/exercise-2')
runApp('C:/Users/PC-2/Desktop/info 201 participation/ch16-shiny/exercise-2')
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
output$cost <- renderText({
x <- input$price * input$quantity
return(paste0("$", x))
})
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
server <- function(input, output) {
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
output$cost <- renderText({
x <- input$price * input$quantity
return(paste0("$", x))
})
}
runApp('C:/Users/PC-2/Desktop/info 201 participation/ch16-shiny/exercise-2')
setwd("C:/Users/PC-2/Desktop/info 201 participation/ch16-shiny/exercise-2")
install.packages("shiny")
# Exercise 1: Shiny basics
# Install and load the `shiny` package
library(shiny)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput("price", label = "Price (in dollars)", value = 0, min = 0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput("quantity", label = "Quantity", value = 1, min = 1),
# The word "Cost", strongly bolded
h1(strong("Cost")),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost")
)
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
server <- function(input, output) {
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
output$cost <- renderText({
x <- input$price * input$quantity
return(paste0("$", x))
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
runApp()
runApp()
